import json
import re
import os
from datetime import datetime

DATE = datetime.now()

OUT = """\"\"\"
Class object for {classname}
Documentation: {documentation}

Generated by generator/generator.py - {date}
\"\"\"
from Alko.objects.objects.base import AlkoBase

{inherit}
"""

CLASS = """
class {classname}(AlkoBase):
{properties}
"""

PROP = """
    @property
    def {key}(self):
        return self.attributes.get("{key}", {default})
"""
PROPCLASS = """
    @property
    def {key}(self):
        return {name}(self.attributes.get("{key}", {default}))
"""
PROPLISTCLASS = """
    @property
    def {key}(self):
        return [{name}(x) for x in self.attributes.get("{key}", [])]
"""

FIXSTURE = """\"\"\"
Generated by generator/generator.py - {date}
\"\"\"
import pytest


@pytest.fixture()
def {name}():
    return {content}
"""

TEST = """\"\"\"
Generated by generator/generator.py - {date}
\"\"\"
from {importfile} import {importclass}
from {fixturefile} import {fixture}

def {testname}({fixture}):
    obj = {importclass}({fixture})
{assertions}
"""

INHERIT = []


def get_input():
    with open("generator/input.json", "r") as inputdata:
        return json.loads(inputdata.read())

def generateclass(name, data, primary=False):
    properties = []
    # print(data)
    for key in data:
        print(key)
        if key.startswith("_"):
            continue
        if isinstance(data[key], list):
            if len(data[key]) > 0:
                if not isinstance(data[key][0], dict) and not isinstance(
                    data[key][0], list
                ):
                    properties.append(PROP.format(key=key, default=[]))
                    continue
                _name = key.split("_")
                _name = "".join([x.title() for x in _name])
                _name = f"{_name}"
                subclass = generateclass(_name, data[key][0])
                if subclass.strip():  # Check if the generated subclass is not empty
                    INHERIT.append(subclass)
                    properties.append(PROPLISTCLASS.format(name=_name, key=key))
                continue
            else:
                properties.append(PROP.format(key=key, default=[]))
                continue
        if isinstance(data[key], dict):
            _name = key.split("_")
            _name = "".join([x.title() for x in _name])
            _name = f"{name}{_name}"
            subclass = generateclass(_name, data[key])
            if subclass.strip():  # Check if the generated subclass is not empty
                INHERIT.append(subclass)
                properties.append(PROPCLASS.format(name=_name, key=key, default={}))
            continue
        if isinstance(data[key], bool):
            properties.append(PROP.format(key=key, default=data[key]))
            continue
        if isinstance(data[key], str):
            properties.append(PROP.format(key=key, default='""'))
            continue
        properties.append(PROP.format(key=key, default=None))

    class_body = "".join(properties)
    if not class_body:
        class_body = "    pass  # No properties defined"

    if not primary:
        return CLASS.format(classname=name, properties=class_body)
    docs = input("Documentation URL: ")
    classname = input("Main Classname: ")
    INHERIT.append(
        CLASS.format(classname=f"Alko{classname}", properties=class_body)
    )

    objectfilename = f"pyalko/objects/{'/'.join([x.lower() for x in re.findall('[A-Z][a-z]*', classname)])}.py"
    if not os.path.exists(os.path.dirname(objectfilename)):
        os.makedirs(os.path.dirname(objectfilename))
        with open(os.path.join(os.path.dirname(objectfilename), "__init__.py"), 'w') as f:
            f.write('')

    with open(
        objectfilename,
        "w",
    ) as objfile:
        objfile.write(
            OUT.format(
                classname=f"Alko{classname}",
                properties=class_body,
                documentation=docs,
                inherit="".join(INHERIT),
                date=DATE,
            )
        )

    fixturefilename = f"tests/responses/{'/'.join([x.lower() for x in re.findall('[A-Z][a-z]*', classname)])}_fixture.py"
    fixturename = f"{fixturefilename.split('/')[-1].replace('.py', '')}_response"

    if not os.path.exists(os.path.dirname(fixturefilename)):
        os.makedirs(os.path.dirname(fixturefilename))
    with open(
        fixturefilename,
        "w",
    ) as fixturefile:
        fixturefile.write(
            FIXSTURE.format(
                name=fixturename,
                content=data,
                date=DATE,
            )
        )

    tmpfilename = [x.lower() for x in re.findall("[A-Z][a-z]*", classname)]
    tmpr = tmpfilename.pop()
    tmpfilename.append(f"test_{tmpr}")
    testfilename = f"tests/objects/{'/'.join(tmpfilename)}.py"
    testname = f"test_{tmpr}"
    assertions = []

    def generate_assertions(prefix, data):
        assertions = []
        for key in data:
            if key.startswith("_"):
                continue
            current_path = f"{prefix}.{key}" if prefix else key
            if not isinstance(data[key], (dict, list)):
                assertions.append(f"    assert obj.{current_path} == {fixturename}['{key}']")
            elif isinstance(data[key], list):
                if len(data[key]) > 0:
                    if not isinstance(data[key][0], (dict, list)):
                        assertions.append(
                            f"    assert obj.{current_path}[0] == {fixturename}['{key}'][0]"
                        )
                    elif isinstance(data[key][0], dict):
                        for sakey in data[key][0]:
                            assertions.append(
                                f"    assert obj.{current_path}[0].{sakey} == {fixturename}['{key}'][0]['{sakey}']"
                            )
            elif isinstance(data[key], dict):
                for akey in data[key]:
                    if not isinstance(data[key][akey], (dict, list)):
                        assertions.append(
                            f"    assert obj.{current_path}.{akey} == {fixturename}['{key}']['{akey}']"
                        )
                    elif isinstance(data[key][akey], list):
                        if len(data[key][akey]) > 0:
                            if not isinstance(data[key][akey][0], (dict, list)):
                                assertions.append(
                                    f"    assert obj.{current_path}.{akey}[0] == {fixturename}['{key}']['{akey}'][0]"
                                )
                            elif isinstance(data[key][akey][0], dict):
                                for sakey in data[key][akey][0]:
                                    assertions.append(
                                        f"    assert obj.{current_path}.{akey}[0].{sakey} == {fixturename}['{key}']['{akey}'][0]['{sakey}']"
                                    )
                    elif isinstance(data[key][akey], dict):
                        for bkey in data[key][akey]:
                            if not isinstance(data[key][akey][bkey], (dict, list)):
                                assertions.append(
                                    f"    assert obj.{current_path}.{akey}.{bkey} == {fixturename}['{key}']['{akey}']['{bkey}']"
                                )
                            elif isinstance(data[key][akey][bkey], list):
                                if len(data[key][akey][bkey]) > 0:
                                    if not isinstance(data[key][akey][bkey][0], (dict, list)):
                                        assertions.append(
                                            f"    assert obj.{current_path}.{akey}.{bkey}[0] == {fixturename}['{key}']['{akey}']['{bkey}'][0]"
                                        )
                                    elif isinstance(data[key][akey][bkey][0], dict):
                                        for sakey in data[key][akey][bkey][0]:
                                            assertions.append(
                                                f"    assert obj.{current_path}.{akey}.{bkey}[0].{sakey} == {fixturename}['{key}']['{akey}']['{bkey}'][0]['{sakey}']"
                                            )
                            elif isinstance(data[key][akey][bkey], dict):
                                for ckey in data[key][akey][bkey]:
                                    if not isinstance(data[key][akey][bkey][ckey], (dict, list)):
                                        assertions.append(
                                            f"    assert obj.{current_path}.{akey}.{bkey}.{ckey} == {fixturename}['{key}']['{akey}']['{bkey}']['{ckey}']"
                                        )
                                    elif isinstance(data[key][akey][bkey][ckey], list):
                                        if len(data[key][akey][bkey][ckey]) > 0:
                                            if not isinstance(data[key][akey][bkey][ckey][0], (dict, list)):
                                                assertions.append(
                                                    f"    assert obj.{current_path}.{akey}.{bkey}.{ckey}[0] == {fixturename}['{key}']['{akey}']['{bkey}']['{ckey}'][0]"
                                                )
                                            elif isinstance(data[key][akey][bkey][ckey][0], dict):
                                                for sakey in data[key][akey][bkey][ckey][0]:
                                                    assertions.append(
                                                        f"    assert obj.{current_path}.{akey}.{bkey}.{ckey}[0].{sakey} == {fixturename}['{key}']['{akey}']['{bkey}']['{ckey}'][0]['{sakey}']"
                                                    )
                                    elif isinstance(data[key][akey][bkey][ckey], dict):
                                        for dkey in data[key][akey][bkey][ckey]:
                                            if not isinstance(data[key][akey][bkey][ckey][dkey], (dict, list)):
                                                assertions.append(
                                                    f"    assert obj.{current_path}.{akey}.{bkey}.{ckey}.{dkey} == {fixturename}['{key}']['{akey}']['{bkey}']['{ckey}']['{dkey}']"
                                                )
                                            elif isinstance(data[key][akey][bkey][ckey][dkey], list):
                                                if len(data[key][akey][bkey][ckey][dkey]) > 0:
                                                    if not isinstance(data[key][akey][bkey][ckey][dkey][0], (dict, list)):
                                                        assertions.append(
                                                            f"    assert obj.{current_path}.{akey}.{bkey}.{ckey}.{dkey}[0] == {fixturename}['{key}']['{akey}']['{bkey}']['{ckey}']['{dkey}'][0]"
                                                        )
                                                    elif isinstance(data[key][akey][bkey][ckey][dkey][0], dict):
                                                        for sakey in data[key][akey][bkey][ckey][dkey][0]:
                                                            assertions.append(
                                                                f"    assert obj.{current_path}.{akey}.{bkey}.{ckey}.{dkey}[0].{sakey} == {fixturename}['{key}']['{akey}']['{bkey}']['{ckey}']['{dkey}'][0]['{sakey}']"
                                                            )
        return assertions

    assertions = generate_assertions("", data)

    if not os.path.exists(os.path.dirname(testfilename)):
        os.makedirs(os.path.dirname(testfilename))
    with open(
        testfilename,
        "w",
    ) as fixturefile:
        fixturefile.write(
            TEST.format(
                importfile=".".join(objectfilename.replace(".py", "").split("/")),
                importclass=f"Alko{classname}",
                fixturefile=".".join(fixturefilename.replace(".py", "").split("/")),
                fixture=fixturename,
                testname=testname,
                assertions="\n".join(assertions),
                date=DATE,
            )
        )

def add_object():
    data = get_input()
    generateclass("", data, True)


add_object()
